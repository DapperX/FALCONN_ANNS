  void set_num_probes(int_fast64_t num_probes) {
    py::gil_scoped_release release;
    inner_entity_->set_num_probes(num_probes);
  }

  int_fast64_t get_num_probes() {
    py::gil_scoped_release release;
    return inner_entity_->get_num_probes();
  }

  void set_max_num_candidates(int_fast64_t max_num_candidates) {
    py::gil_scoped_release release;
    return inner_entity_->set_max_num_candidates(max_num_candidates);
  }

  int_fast64_t get_max_num_candidates() {
    py::gil_scoped_release release;
    return inner_entity_->get_max_num_candidates();
  }

  int32_t find_nearest_neighbor(OuterNumPyArray q) {
    InnerEigenMap converted_query = numpy_to_eigen(q);
    py::gil_scoped_release release;
    return inner_entity_->find_nearest_neighbor(converted_query);
  }

  std::pair<std::vector<std::vector<int32_t>>,uint64_t>
  find_knn_batch(OuterNumPyArray qs, int_fast64_t k) {
    InnerPlainArrayPointSet converted_queries = numpy_to_plain_dataset(qs);

    const auto num_points = converted_queries.num_points;
    const auto data = converted_queries.data;
    const auto dim = converted_queries.dimension;
    std::vector<std::vector<int32_t>> knn_res(num_points);

    parlay::parallel_for(0, num_points, [&](size_t i){
      typedef Eigen::Map<const DenseVector<ScalarType>> ConstVectorMap;
      ConstVectorMap q(&data[i*dim], static_cast<int>(dim));
      inner_entity_->find_k_nearest_neighbors(q, k, &knn_res[i]);
    });
    
    falconn::QueryStatistics stats = inner_entity_->get_query_statistics();
    uint64_t cnt_ucand = stats.average_num_unique_candidates;

    return std::make_pair(std::move(knn_res), cnt_ucand);
  }

  std::vector<int32_t> find_k_nearest_neighbors(OuterNumPyArray q,
                                                int_fast64_t k) {
    InnerEigenMap converted_query = numpy_to_eigen(q);
    py::gil_scoped_release release;
    std::vector<int32_t> result;
    inner_entity_->find_k_nearest_neighbors(converted_query, k, &result);
    return result;
  }

  std::vector<int32_t> find_near_neighbors(OuterNumPyArray q,
                                           ScalarType threshold) {
    InnerEigenMap converted_query = numpy_to_eigen(q);
    py::gil_scoped_release release;
    std::vector<int32_t> result;
    inner_entity_->find_near_neighbors(converted_query, threshold, &result);
    return result;
  }

  std::vector<int32_t> get_unique_candidates(OuterNumPyArray q) {
    InnerEigenMap converted_query = numpy_to_eigen(q);
    py::gil_scoped_release release;
    std::vector<int32_t> result;
    inner_entity_->get_unique_candidates(converted_query, &result);
    return result;
  }

  std::vector<int32_t> get_candidates_with_duplicates(OuterNumPyArray q) {
    InnerEigenMap converted_query = numpy_to_eigen(q);
    py::gil_scoped_release release;
    std::vector<int32_t> result;
    inner_entity_->get_candidates_with_duplicates(converted_query, &result);
    return result;
  }

  void reset_query_statistics() {
    py::gil_scoped_release release;
    inner_entity_->reset_query_statistics();
  }

  QueryStatistics get_query_statistics() {
    py::gil_scoped_release release;
    return inner_entity_->get_query_statistics();
  }
